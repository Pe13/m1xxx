#!/usr/bin/env python3

import argparse
import os
import platform
import subprocess
import sys

from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent

TRIPLET_OSS = {
    'Darwin': 'osx',
}

TRIPLET_ARCHS = {
    'x86_64': 'x64',
    'arm64': 'arm64',
}

# Packages to be built for the target architecture
# Source: https://github.com/daschuer/vcpkg/blob/1023e7bdc915e9b69ce0dbdc2f750921e15d4499/.github/workflows/build.yml
TARGET_PACKAGES = [
    'chromaprint',
    'fdk-aac',
    'ffmpeg',
    'fftw3',
    'hidapi',
    'hss1394',
    'libdjinterop',
    'libebur128',
    'libflac',
    'libkeyfinder',
    'libmodplug',
    'libogg',
    'libopusenc',
    'libsndfile[core]',
    'libusb',
    'libvorbis',
    'lilv',
    'mp3lame',
    'ms-gsl',
    'opus',
    'opusfile',
    'portaudio[asio]',
    'portmidi',
    'protobuf',
    'pthreads',
    'qt5-base',
    'qt5-declarative',
    'qt5-script',
    'qt5-svg',
    'qt5-translations',
    'qtkeychain',
    'rubberband',
    'soundtouch',
    'taglib',
    'wavpack',
    'qt5-macextras',
]

# Packages to be built for the host architecture when crosscompiling
HOST_PACKAGES = [
    'qt5-host-tools',
]

def platform_triplet():
    arch = TRIPLET_ARCHS.get(platform.machine(), None)
    os = TRIPLET_OSS.get(platform.system(), None)
    return '-'.join([arch, os]) if os and arch else None

def main():
    default_triplet = platform_triplet()

    parser = argparse.ArgumentParser(description="Builds and installs Mixxx's dependencies in the vcpkg tree")
    parser.add_argument('--host', type=str, default=os.getenv('VCPKG_DEFAULT_HOST_TRIPLET', default_triplet), help='The host triplet to use.')
    parser.add_argument('--target', type=str, default=os.getenv('VCPKG_DEFAULT_TRIPLET', default_triplet), help='The target triplet to use.')
    parser.add_argument('--dry-run', action='store_true', help='Do not actually build/install.')
    parser.add_argument('--clean-after-build', action='store_true', help='Clean up buildtrees, packages and downloads after each build.')
    parser.add_argument('--vcpkg', type=Path, default=str(ROOT / 'scripts' / 'vcpkg'), help='The vcpkg binary to use.')

    args = parser.parse_args()
    host = args.host
    target = args.target
    is_crosscompiling = host != target
    vcpkg = args.vcpkg

    if not host:
        print('No host triplet!')
        sys.exit(1)

    if not target:
        print('No target triplet!')
        sys.exit(1)

    print(f'Host triplet:   {host}')
    print(f'Target triplet: {target}')

    packages = TARGET_PACKAGES + ([f'{pkg}:{host}' for pkg in HOST_PACKAGES] if is_crosscompiling else [])
    vcpkg_flags = [
        '--host-triplet', host,
        '--triplet', target,
    ]

    print('==> Removing outdated packages...')
    remove_flags = [
        '--outdated',
        '--recurse',
        *(['--dry-run'] if args.dry_run else []),
    ]
    subprocess.run([str(vcpkg), 'remove', *vcpkg_flags, *remove_flags], check=True)

    print(f'==> Installing {len(packages)} packages...')
    install_flags = [
        '--recurse',
        *(['--dry-run'] if args.dry_run else []),
        *(['--clean-after-build'] if args.clean_after_build else []),
    ]
    subprocess.run([str(vcpkg), 'install', *vcpkg_flags, *install_flags, *packages], check=True)

if __name__ == '__main__':
    main()
