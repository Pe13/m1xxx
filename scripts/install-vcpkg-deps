#!/usr/bin/env python3

import argparse
import os
import platform
import subprocess
import sys

from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent

TRIPLET_OSS = {
    'Darwin': 'osx',
}

TRIPLET_ARCHS = {
    'x86_64': 'x64',
    'arm64': 'arm64',
}

# Packages to be built for the target architecture
# Source: https://github.com/mixxxdj/vcpkg/blob/2.5-rel/.github/workflows/build.yml
TARGET_PACKAGES = [
    'ableton-link',
    'benchmark',
    'chromaprint',
    'fdk-aac',
    'ffmpeg',
    'fftw3',
    'gtest',
    'hidapi',
    'libdjinterop',
    'libebur128',
    'libflac',
    'libkeyfinder',
    'libmodplug',
    'libogg',
    'libopusenc',
    'libsndfile[core]',
    'libusb',
    'libvorbis',
    'lilv',
    'mp3lame',
    'ms-gsl',
    'opus',
    'opusfile',
    'portaudio[asio]',
    'portmidi',
    'protobuf',
    'pthreads',
    'qt5-base',
    'qt5-declarative',
    'qt5-script',
    'qt5-svg',
    'qt5-translations',
    'rubberband',
    'soundtouch',
    'taglib',
    'wavpack',
]

# Packages to be built only when compiling for a given target os
PLATFORM_PACKAGES = {
    'osx': [
        'hss1394',
        'qtkeychain', # libgcrypt seems to be unsupported on iOS
        'qt5-macextras',
    ],
}

# Packages to be built for the host architecture when crosscompiling
HOST_PACKAGES = []

def platform_triplet():
    arch = TRIPLET_ARCHS.get(platform.machine(), None)
    os = TRIPLET_OSS.get(platform.system(), None)
    return '-'.join([arch, os]) if os and arch else None

def main():
    default_triplet = platform_triplet()

    parser = argparse.ArgumentParser(description="Builds and installs Mixxx's dependencies in the vcpkg tree")
    parser.add_argument('--host', type=str, default=os.getenv('VCPKG_DEFAULT_HOST_TRIPLET', default_triplet), help='The host triplet to use.')
    parser.add_argument('--target', type=str, default=os.getenv('VCPKG_DEFAULT_TRIPLET', default_triplet), help='The target triplet to use.')
    parser.add_argument('--dry-run', action='store_true', help='Do not actually build/install.')
    parser.add_argument('--skip-host-packages', action='store_true', help='Skip host-only packages built when crosscompiling.')
    parser.add_argument('--clean-after-build', action='store_true', help='Clean up buildtrees, packages and downloads after each build.')
    parser.add_argument('--vcpkg', type=Path, default=str(ROOT / 'scripts' / 'vcpkg'), help='The vcpkg binary to use.')
    parser.add_argument('--remove', action=argparse.BooleanOptionalAction, default=True, help='Remove outdated packages.')
    parser.add_argument('--install', action=argparse.BooleanOptionalAction, default=True, help='Install the dependencies.')

    args = parser.parse_args()
    host = args.host
    target = args.target
    is_crosscompiling = host != target
    build_host_packages = is_crosscompiling and not args.skip_host_packages
    vcpkg = args.vcpkg

    if not host:
        print('No host triplet!')
        sys.exit(1)

    if not target:
        print('No target triplet!')
        sys.exit(1)

    print(f'Host triplet:   {host}')
    print(f'Target triplet: {target}')

    target_os = target.split('-')[1]

    host_packages = [f'{pkg}:{host}' for pkg in HOST_PACKAGES] if build_host_packages else []
    platform_packages = PLATFORM_PACKAGES.get(target_os, [])
    packages = TARGET_PACKAGES + platform_packages + host_packages
    vcpkg_flags = [
        '--host-triplet', host,
        '--triplet', target,
    ]

    if args.remove:
        print('==> Removing outdated packages...')
        remove_flags = [
            '--outdated',
            '--recurse',
            *(['--dry-run'] if args.dry_run else []),
        ]
        subprocess.run([str(vcpkg), 'remove', *vcpkg_flags, *remove_flags], check=True)

    if args.install:
        print(f'==> Installing {len(packages)} packages...')
        install_flags = [
            '--recurse',
            *(['--dry-run'] if args.dry_run else []),
            *(['--clean-after-build'] if args.clean_after_build else []),
        ]
        subprocess.run([str(vcpkg), 'install', *vcpkg_flags, *install_flags, *packages], check=True)

if __name__ == '__main__':
    main()
