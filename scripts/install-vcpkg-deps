#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

from helpers.triplet import platform_triplet

from pathlib import Path
from tempfile import TemporaryDirectory

ROOT = Path(__file__).resolve().parent.parent

def main():
    default_triplet = platform_triplet()

    parser = argparse.ArgumentParser(description="Builds and installs Mixxx's dependencies in the vcpkg tree")
    parser.add_argument('--host', type=str, default=os.getenv('VCPKG_DEFAULT_HOST_TRIPLET', default_triplet), help='The host triplet to use.')
    parser.add_argument('--target', type=str, default=os.getenv('VCPKG_DEFAULT_TRIPLET', default_triplet), help='The target triplet to use.')
    parser.add_argument('--dry-run', action='store_true', help='Do not actually build/install.')
    parser.add_argument('--skip-host-packages', action='store_true', help='Skip host-only packages built when crosscompiling.')
    parser.add_argument('--clean-after-build', action='store_true', help='Clean up buildtrees, packages and downloads after each build.')
    parser.add_argument('--vcpkg', type=Path, default=ROOT / 'scripts' / 'vcpkg', help='The vcpkg binary to use.')
    parser.add_argument('--qt5', action='store_true', help='Build with Qt 5')
    parser.add_argument('--install-root', type=Path, default=ROOT / 'vcpkg' / 'installed', help="The install root for vcpkg.")
    parser.add_argument('--manifest-root', type=Path, default=ROOT / 'vcpkg', help="The directory containing Mixxx's vcpkg.json.")
    parser.add_argument('--graph', action=argparse.BooleanOptionalAction, default=False, help='Output the dependency graph.')
    parser.add_argument('--remove', action=argparse.BooleanOptionalAction, default=True, help='Remove outdated packages.')
    parser.add_argument('--install', action=argparse.BooleanOptionalAction, default=True, help='Install the dependencies.')

    args = parser.parse_args()
    host = args.host
    target = args.target
    vcpkg = args.vcpkg
    manifest_root = args.manifest_root
    install_root = args.install_root

    if not host:
        print('No host triplet!')
        sys.exit(1)

    if not target:
        print('No target triplet!')
        sys.exit(1)

    print(f'Host triplet:   {host}')
    print(f'Target triplet: {target}')

    vcpkg_flags = [
        '--host-triplet', host,
        '--triplet', target,
        '--x-install-root', install_root,
    ]

    if args.graph:
        print('==> Printing dependency graph...')
        # Workaround for https://github.com/microsoft/vcpkg/issues/36520
        with TemporaryDirectory(prefix='m1xxx-dependency-graph-') as tmp:
            tmp_path = Path(tmp)
            tmp_ports_path = tmp_path / 'ports'
            tmp_port_name = 'mixxx'
            tmp_ports_path.mkdir()
            (tmp_ports_path / tmp_port_name).symlink_to(manifest_root)
            depend_info_flags = [
                '--format', 'tree',
                '--overlay-ports', str(tmp_ports_path),
            ]
            subprocess.run([str(vcpkg), 'depend-info', *depend_info_flags, tmp_port_name], check=True, cwd=tmp_ports_path)

    if args.remove:
        print('==> Removing outdated packages...')
        remove_flags = [
            '--outdated',
            '--recurse',
            *(['--dry-run'] if args.dry_run else []),
        ]
        subprocess.run([str(vcpkg), 'remove', *vcpkg_flags, *remove_flags], check=True)

    if args.install:
        print(f'==> Installing dependencies...')
        install_flags = [
            '--recurse',
            *(['--dry-run'] if args.dry_run else []),
            *(['--clean-after-build'] if args.clean_after_build else []),
            *(['--x-no-default-features', '--x-feature', 'qt5'] if args.qt5 else []),
        ]
        subprocess.run([str(vcpkg), 'install', *vcpkg_flags, *install_flags], check=True, cwd=manifest_root)

if __name__ == '__main__':
    main()
