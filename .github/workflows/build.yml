name: Build

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-10.15
    env:
      CMAKE_GENERATOR: Ninja
      CMAKE_OPTIONS: >-
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DMACOS_BUNDLE=ON
      CPACK_GENERATOR: DragNDrop
      VCPKG_PACKAGES: >-
        angle
        chromaprint
        fdk-aac
        ffmpeg
        fftw3
        hidapi
        hss1394
        libdjinterop
        libebur128
        libflac
        libkeyfinder
        libmodplug
        libogg
        libopusenc
        libshout
        libsndfile
        libusb
        libvorbis
        lilv
        mp3lame
        opus
        opusfile
        portaudio[asio]
        portmidi
        protobuf
        pthreads
        qt5-base
        qt5-declarative
        qt5-macextras
        qt5-script
        qt5-svg
        qt5-translations
        qtkeychain
        rubberband
        soundtouch
        taglib
        wavpack
      VCPKG_DEFAULT_TRIPLET: arm64-osx-min11.0
      VCPKG_OVERLAY_TRIPLETS: vcpkg/overlay/triplets
      VCPKG_OVERLAY_PORTS: vcpkg/overlay/osx:vcpkg/overlay/ports
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer
      SDKROOT: /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Get versions
      id: versions
      run: |
        for mod in vcpkg mixxx; do
          echo "::set-output name=$mod-version::$(cd $mod && git rev-parse HEAD)"
          echo "::set-output name=$mod-version-short::$(cd $mod && git rev-parse --short HEAD)"
        done
      shell: bash
    - name: Set up build environment
      run: |
        brew install nasm automake ninja
        /bin/bash -c "sudo xcode-select --switch ${{ env.DEVELOPER_DIR }}"
        xcrun --show-sdk-version
    # Build dependencies
    - name: Bootstrap vcpkg
      run: vcpkg/bootstrap-vcpkg.sh -disableMetrics
    - name: Set up cache
      uses: actions/cache@v3
      with:
        path: vcpkg/installed
        # TODO: Include hashed list of installed packages (VCPKG_PACKAGES) in key?
        key: vcpkg-installed-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ steps.versions.outputs.vcpkg-version }}-${{ github.ref }}-${{ github.run_number }}
        restore-keys: |
          vcpkg-installed-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ steps.versions.outputs.vcpkg-version }}-${{ github.ref }}-
          vcpkg-installed-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ steps.versions.outputs.vcpkg-version }}-
    - name: Check disk space
      run: df -h
    - name: Upgrade vcpkg packages
      run: vcpkg/vcpkg upgrade --no-dry-run
    - name: Build vcpkg packages
      run: vcpkg/vcpkg install --clean-after-build --recurse ${{ env.VCPKG_PACKAGES }}
    - name: Upload vcpkg build logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: vcpkg-buildlogs
        path: |
          vcpkg/buildtrees/**/build-*.log
          vcpkg/buildtrees/**/install-*.log
    # Build Mixxx
    - name: Configure Mixxx build
      run: >-
        cmake
        -G ${{ env.CMAKE_GENERATOR }}
        -B build
        ${{ env.CMAKE_OPTIONS }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_C_COMPILER=$(xcrun -find cc)
        -DCMAKE_CXX_COMPILER=$(xcrun -find c++)
      working-directory: mixxx
    - name: Upload Mixxx configuration logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: mixxx-configurelogs
        path: mixxx/build/CMakeFiles/*.log
    - name: Build Mixxx
      run: cmake --build build
      working-directory: mixxx
    - name: Package Mixxx
      run: cpack -G ${{ env.CPACK_GENERATOR }} -V
      working-directory: mixxx/build
    - name: Upload packaged Mixxx binaries
      uses: actions/upload-artifact@v3
      with:
        name: mixxx-arm64-macos
        with: mixxx/build/*.dmg

    # TODO: Create GitHub Release (?)
